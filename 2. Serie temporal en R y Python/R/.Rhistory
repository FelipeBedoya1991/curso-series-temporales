t
desv(diferencia)
t = (mean(diferencia)-4.5)/((sd(diferencia))/sqrt(n))
t
sd
pt(0.95,6)
qt(0.95,6)
qt(0.95,6)
#7
p0 = 0.2
z=(0.136-p0)/sqrt(0.16/1000)
z
sqrt(0.16/1000)
pnorm(-5)
#8
p1 <- 123/440
p2 <- 145/560
p <- (123+145)/(440+560)
q<- 1-p
n1 <- 440
n2 <- 560
z <- (p1-p2)/sqrt(p*q*(1/n1+1/n2))
#8
p1 <- 123/440
p2 <- 145/560
p <- (123+145)/(440+560)
q<- 1-p
n1 <- 440
n2 <- 560
z <- (p1-p2)/sqrt(p*q*(1/n1+1/n2))
z
#8
p1 <- 123/440
p2 <- 145/560
p <- (123+145)/(440+560)
q<- 1-p
n1 <- 440
n2 <- 560
z <- (p1-p2)/sqrt(p*q*(1/n1+1/n2))
z
z0 <- qnorm(0.995)
z0
#8
p1 <- 123/440
p2 <- 145/560
p <- (123+145)/(440+560)
q<- 1-p
n1 <- 440
n2 <- 560
z <- (p1-p2)/sqrt(p*q*(1/n1+1/n2))
z
z0 <- qnorm(0.6)
z0
#8
p1 <- 123/440
p2 <- 145/560
p <- (123+145)/(440+560)
q<- 1-p
n1 <- 440
n2 <- 560
z <- (p1-p2)/sqrt(p*q*(1/n1+1/n2))
z
z0 <- qnorm(0.995)
z0
qnorm(0.975)
qnorm(0.9999999)
1-pbinom(3,20,0.15)
1-pbinom(0,20,0.15)-pbinom(1,20,0.15)-pbinom(2,20,0.15)-pbinom(3,20,0.15)
1-pbinom(3,20,0.15)
pbinom(3,20,0.3)
1-pbinom(5,20,0.15)
1-pbinom(6,20,0.15)
qbinom(0.95,20,0.15)
pbinom(6,20,0.3)
qnorm(0.95)
20*0.15-0.5+(qnorm(0.95))*sqrt(20*0.15*0.85)
rnorm(10)
runif(0,1)
runif(10,0,1)
rbinom(10,200,0.5)
p1 <- 123/440
p2 <- 145/560
p <- (123+145)/(440+560)
q<- 1-p
n1 <- 440
n2 <- 560
z <- (p1-p2)/sqrt(p*q*(1/n1+1/n2))
z
z0 <- qnorm(0.995)
z0
z
p0 = 0.2
z=(0.136-p0)/sqrt(0.16/1000)
z
p0 = 0.2
z=(0.136-p0)/sqrt(0.16/1000)
z
pnorm(z)
1-pbinom(6,20,0.15)
1-pbinom(5,20,0.15)
pbinom(5,20,0.3)
20*0.15-0.5+(qnorm(0.95))*sqrt(20*0.15*0.85)
#5
antes <- c(58.5,	60.3,	61.7,	69.0,	64.0,	62.6,	56.7)
despues <- c(60.0,	54.9,	58.1,	62.1,	58.5,	59.9,	54.4)
diferencia <- antes-despues
mean(diferencia)
L1 = (mean(diferencia))-(qt(0.975,6))*(var(diferencia))/sqrt(7)
L2 = (mean(diferencia))+(qt(0.975,6))*(var(diferencia))/sqrt(7)
L1
L2
alpha = 0.05
n=7
t = (mean(diferencia)-4.5)/((sd(diferencia))/sqrt(n))
t
qt(0.95,6)
sigma_0 <- 120
sigma_1 <- 148
chi <- (14*sigma_1^2)/sigma_0^2
chi_0 <- qchisq(0.95,14)
chi
chi_0
a
#8
p1 <- 123/440
p2 <- 145/560
p <- (123+145)/(440+560)
q<- 1-p
n1 <- 440
n2 <- 560
z <- (p1-p2)/sqrt(p*q*(1/n1+1/n2))
z
z0 <- qnorm(0.995)
z0
sigma_0 <- 120
sigma_1 <- 148
chi <- (14*sigma_1^2)/sigma_0^2
chi_0 <- qchisq(0.95,14)
chi
chi_0
z
#7
p0 = 0.2
z=(0.136-p0)/sqrt(0.16/1000)
z
#7
p0 = 0.2
z=(0.136-p0)/sqrt(0.16/1000)
z
pnorm(z)
#8
p1 <- 123/440
p2 <- 145/560
p <- (123+145)/(440+560)
q<- 1-p
n1 <- 440
n2 <- 560
z <- (p1-p2)/sqrt(p*q*(1/n1+1/n2))
z
z0 <- qnorm(0.995)
z0
z <- (p1-p2)/sqrt(p*q*(1/n1+1/n2))
z
z0 <- qnorm(0.995)
z0
filamento <- c(102,	 98,	 93,	100,	98,	105,	115,	110,	99,	120,
115,	130,	100,	86,	95,	103,	105,	92,	99,	134,
116,	118,	89,	102,	128,	99,	119,	128,	110,	130,
112,	114,	106,	114,	100,	116,	108,	113, 106,	105,
120,	106,	110,	100,	106,	117,	109,	108,	105,	106
)
filamento
L1_filamento=(mean(filamento))-(qt(0.95,49))*(var(filamento))/sqrt(50)
L2_filamento=(mexan(filamento))+(qt(0.95,49))*(var(filamento))/sqrt(50)
L1_filamento=(mean(filamento))-(qt(0.95,49))*(var(filamento))/sqrt(50)
L2_filamento=(mean(filamento))+(qt(0.95,49))*(var(filamento))/sqrt(50)
L1_filamento
L2_filamento
L1_filamento=(mean(filamento))-(qt(0.95,49))*(var(filamento))/sqrt(50)
L2_filamento=(mean(filamento))+(qt(0.95,49))*(var(filamento))/sqrt(50)
L1_filamento
L2_filamento
L1_filamento_var=(49)*var(filamento)/qchisq(0.95,49)
L2_filamento_var=(49)*var(filamento)/qchisq(0.05,49)
L1_filamento_var
L2_filamento_var
knitr::opts_chunk$set(echo = TRUE)
precios = c(15.5,	21,	18.5,	19.3,	19.7,	16.9,	20.2,	14.5, 16.5,	19.2,	18.7,	18.2,	18,	17.5,	18.5,	20.5, 18.6,	19.1,	19.8,	18,	19.8,	18.2,	20.3,	21.8)
precios
promedio_g = mean(precios)
promedio_g
var_g = var(precios)
var_g
qt(0.95,23)
L1=(promedio_g)-(qt(0.95,23))*(var_g)/sqrt(24)
L2=(promedio_g)+(qt(0.95,23))*(var_g)/sqrt(24)
L1
L2
antes <- c(58.5,	60.3,	61.7,	69.0,	64.0,	62.6,	56.7)
antes
diferencia <- antes - despues
despues <- c(60.0,	54.9,	58.1,	62.1,	58.5,	59.9,	54.4)
despues
despues <- c(60.0,	54.9,	58.1,	62.1,	58.5,	59.9,	54.4)
despues
diferencia <- antes - despues
diferencia
L1_peso=(mean(diferencia))-(qt(0.95,6))*(var(diferencia))/sqrt(7)
L2_peso=(mean(diferencia))+(qt(0.95,6))*(var(diferencia))/sqrt(7)
L1_peso
L2_peso
filamento <- c(102,	 98,	 93,	100,	98,	105,	115,	110,	99,	120,
115,	130,	100,	86,	95,	103,	105,	92,	99,	134,
116,	118,	89,	102,	128,	99,	119,	128,	110,	130,
112,	114,	106,	114,	100,	116,	108,	113, 106,	105,
120,	106,	110,	100,	106,	117,	109,	108,	105,	106
)
filamento
L1_filamento=(mean(filamento))-(qt(0.95,49))*(var(filamento))/sqrt(50)
L2_filamento=(mean(filamento))+(qt(0.95,49))*(var(filamento))/sqrt(50)
L1_filamento
L2_filamento
L1_filamento_var=(49)*var(filamento)/qchisq(0.95,49)
L2_filamento_var=(49)*var(filamento)/qchisq(0.05,49)
L1_filamento_var
L2_filamento_var
tr <- c(2.1,5.3,1.4,4.6,0.9)
tr
ntr <- c(1.9,0.5,2.8,3.1)
ntr
antes_curso <- c(212,	282,	203,	327,	165,	198)
antes_curso
despues_curso <- c(237,	291,	191,	341,	192,	180)
despues_curso
diferencia_curso <- despues_curso-antes_curso
diferencia_curso
L1_curso=(mean(diferencia_curso))-(qt(0.975,5))*(var(diferencia_curso))/sqrt(6)
L2_curso=(mean(diferencia_curso))+(qt(0.975,5))*(var(diferencia_curso))/sqrt(6)
L1_curso
L2_curso
m1 <- c(16.03,16.04,16.05,16.05,16.02,16.01,15.96,15.98,16.02,15.99)
m1
m2 <- c(16.02,15.97,15.96,16.01,15.99,16.03,16.04,16.02,16.01,16)
m2
z <- mean(m1)-mean(m2)/sqrt(0.015^2/length(m1))
z <- mean(m1)-mean(m2)/sqrt(0.015^2/length(m1)+0.018^2/length(m2))
z
z <- mean(m1)-mean(m2)/sqrt((0.015^2)/length(m1)+(0.018^2)/length(m2))
z
sqrt((0.015^2)/length(m1)+(0.018^2)/length(m2))
L1_b <- mean(m1)-mean(m2)-qnorm(0.975)*sqrt((0.015^2)/length(m1)+(0.018^2)/length(m2))
L1_b
L1_b <- mean(m1)-mean(m2)-qnorm(0.975)*sqrt((0.015^2)/length(m1)+(0.018^2)/length(m2))
L1_b
L2_b <- mean(m1)-mean(m2)+qnorm(0.975)*sqrt((0.015^2)/length(m1)+(0.018^2)/length(m2))
L2_b
mean(tr)
mean(ntr)
t.test(x=tr , y=ntr , conf.level =0.95)
t.test(x=tr , y=ntr , conf.level =0.95)$conf.int
t.test(x=tr , y=ntr , conf.level =0.95)$conf.int
t.test(x=tr , y=ntr , conf.level =0.95)$conf.int
source('~/GitHub/curso-series-temporales/2. Serie temporal en R y Python/R/1_R_FechaTiempo.R', echo=TRUE)
x = as.POSIXct("2019-12-25 11:45:34") # Número de segundos desde la fecha de referencia 01-01-1970
y = as.POSIXlt("2019-12-25 11:45:34")
x; y # Se obtiene lo mismo, pero qué hay detrás de esto?
unclass(x)
unclass(y)
y$zone # Con POSIXlt podemos extraer componentes
x$zone # Con POSIXct no es posible porque solo devuelve el numero de segundos
a = c("1998,11,11", "1983/01/23", "1982:09:04", "1945-05-09", 19821224, "1974.12.03", 19871210)
a = ymd(a, tz = "CET") ;a
b = hms(b); b
b = c("22 4 5", "04;09;45", "11:9:56", "23,15,12", "14 16 34", "8 8 23", "21 16 14")
b = hms(b); b
f = rnorm(7,10); f = round(f, digits = 2); f
rnorm(7,10,1)
rnorm(7,10,0.5)
f = rnorm(7,10); f = round(f, digits = 2); f
date_time_measurement = cbind.data.frame(date = a, time = b, measurement = f)
date_time_measurement
source('~/GitHub/curso-series-temporales/2. Serie temporal en R y Python/R/1_R_FechaTiempo_Ejercicio.R', echo=TRUE)
source('~/GitHub/curso-series-temporales/2. Serie temporal en R y Python/R/1_R_FechaTiempo_Ejercicio.R', echo=TRUE)
source('~/GitHub/curso-series-temporales/2. Serie temporal en R y Python/R/1_R_FechaTiempo_Ejercicio.R', echo=TRUE)
source('~/GitHub/curso-series-temporales/2. Serie temporal en R y Python/R/1_R_FechaTiempo_Ejercicio.R', echo=TRUE)
b = hms(b); b
a = ymd(a, tz = "CET") ;a
date_time_measurement = cbind.data.frame(date = a, time = b, measurement = f)
date_time_measurement = cbind.data.frame(date = a, time = b, measurement = f)
date_time_measurement
### Objeto serie de tiempo en R
# Creamos unos datos
mydata = runif(n = 50, min = 10, max = 45)
mytimeseries = ts(data = mydata,
start = 1956, frequency = 4)
# Veamos el gráfico de la serie
plot(mytimeseries)
# Clase
class(mytimeseries)
# Tiempos
time(mytimeseries)
# Redefiniendo el inicio "start"
mytimeseries = ts(data = mydata,
start = c(1956,3), frequency = 4)
plot(nottem)
# Otros paquetes
library(forecast)
library(ggplot2)
plot(nottem)
autoplot((nottem))
autoplot(nottem) + ggtitle("Autoplot of Nottingham temperature data")
mydata=read.csv('Rmissing.csv')
setwd("~/GitHub/curso-series-temporales/2. Serie temporal en R y Python/R")
### Datos faltantes y Outliers
## Import ts.Rmissing.csv
mydata=read.csv('Rmissing.csv')
cbind.data.frame()
mydata
myts = ts(mydata$mydata)
myts
summary(myts)
plot(myts)
library(zoo)
# Usando zoo para localizar y rellenar valores faltantes
library(zoo)
myts.NAlocf = na.locf(myts) #LOCF: last observation carried forward (copia la última observacion antes del NA)
myts.NAfill = na.fill(myts, 33) #rellena con el valor que le pongamos
# Detección automática de outliers con la librería forecast
library(forecast)
myts1 = tsoutliers(myts)
myts1
plot(myts)
myts.NAinterp = na.interp(myts) #rellena NA con interpolación
mytsclean = tsclean(myts)
plot(mytsclean)
summary(mytsclean)
#Importando datos de precios de cierre de Starbucks y Microsoft
library(readr)
sbux.df <- read_csv("A CURSO SERIES TEMPORALES (NUEVO)/Clases Nuevas/Starbuck/sbuxPrices.csv")
sbuxPrices <- read.csv("~/GitHub/curso-series-temporales/2. Serie temporal en R y Python/R/sbuxPrices.csv")
View(sbuxPrices)
sbux.df <- read_csv('sbuxPrices')
sbux.df <- read_csv('sbuxPrices.csv')
#Importando datos de precios de cierre de Starbucks y Microsoft
library(readr)
sbux.df <- read_csv('sbuxPrices.csv')
View(sbux.df)
#Importando datos de precios de cierre de Starbucks y Microsoft
library(readr)
sbux.df <- read_csv('sbuxPrices.csv')
View(sbux.df)
sbux.ts = ts(data=sbux.df$Adj.Close, frequency = 12,
start=c(1993,3), end=c(2008,3))
class(sbux.ts)
View(sbux.df)
sbux.ts = ts(data=sbux.df$Adj.Close, frequency = 12,
start=c(1993,3), end=c(2008,3))
class(sbux.ts)
msft.df <- read_csv("msftPrices.csv")
View(sbux.df)
msft.ts = ts(data=msft.df$Adj.Close, frequency = 12,
start=c(1993,3), end=c(2008,3))
#Fechas y frecuencia de la serie
sbux.ts
sbux.ts
start(sbux.ts)
end(sbux.ts)
frequency(sbux.ts)
tmp = sbux.ts[1:5]
class(tmp)
tmp
tmp = window(sbux.ts, start=c(1993, 3), end=c(1993,8))
class(tmp)
sbuxmsft.ts = cbind(sbux.ts, msft.ts)
class(sbuxmsft.ts)
class(sbuxmsft.ts)
#Seleccionando las primeras 5 filas:
window(sbuxmsft.ts, start=c(1993, 3), end=c(1993,7))
plot(sbux.ts, col="blue", lwd=2, ylab="Adjusted close",
main="Monthly closing price of SBUX")
#Dibujar un subconjunto (Acercar)
plot(window(sbux.ts, start=c(2000,3), end=c(2008,3)),
ylab="Adjusted close",col="blue", lwd=2,
main="Monthly closing price of SBUX")
plot(sbuxmsft.ts)
#En el mismo gráfico
plot(sbuxmsft.ts, plot.type="single",
main="Monthly closing prices on SBUX and MSFT",
ylab="Adjusted close price",
col=c("blue", "red"), lty=1:2)
legend(1994, 35, legend=c("SBUX","MSFT"), col=c("blue", "red"),
lty=1:2)
################### zoo
library(zoo)
library(zoo)
td = seq(as.Date("1993/3/1"), as.Date("2008/3/1"), "months")
class(td)
head(td)
td
sbux.df$Date
#Alternativa
td2 = as.Date(sbux.df$Date, format="%m/%d/%Y")
head(td2)
head(td)
#Combinando el índice de tiempo a las dos series de precios
sbux.z = zoo(x=sbux.df$Adj.Close, order.by=td)
msft.z = zoo(x=msft.df$Adj.Close, order.by=td)
class(sbux.z)
str(sbux.z)
head(sbux.z)
sbux.z
index(sbux.z)
coredata(sbux.z)
#Start and End
start(sbux.z)
end(sbux.z)
#Ventaja de zoo: extraer subconjunto indexando con las fechas
sbux.z[as.Date(c("2000/3/1", "2003/3/1"))]
window(sbux.z, start=as.Date("2000/3/1"), end=as.Date("2003/3/1"))
sbux.z[as.Date(c("2000/3/1", "2003/3/1"))]
#window() también funciona
window(sbux.z, start=as.Date("2000/3/1"), end=as.Date("2003/3/1"))
class(sbux.z)
sbuxmsft.z = cbind(sbux.z, msft.z)
class(sbuxmsft.z)
head(sbuxmsft.z)
sbux.z
#Combinando dos series
sbuxmsft.z = cbind(sbux.z, msft.z)
class(sbuxmsft.z)
head(sbuxmsft.z)
window(sbux.z, start=as.Date("2000/3/1"), end=as.Date("2003/3/1"))
sbux.z
#Plot
plot(sbux.z, col="blue", lty=1, lwd=2, ylim=c(0,50),main="Monthly closing prices of SBUX and MFST",
ylab="Adjusted close price")
lines(msft.z, col="red", lty=2, lwd=2)
legend(x="topleft", legend=c("SBUX","MSFT"), col=c("blue","red"),
lty=1:2)
#Alternativa, las dos a la vez
plot(sbuxmsft.z, plot.type="single", col=c("blue","red"), lty=1:2,
lwd=2,main="Monthly closing prices of SBUX and MFST",
ylab="Adjusted close price")
legend(x="topleft", legend=c("SBUX","MSFT"), col=c("blue","red"),
lty=1:2)
#Importar datos directamente como objeto zoo
sbux.z2 = read.zoo("sbuxPrices.csv",
format="%m/%d/%Y", sep=",", header=T)
#Importar datos de Yahoo Finance
library(tseries)
#Alternativa, las dos a la vez
plot(sbuxmsft.z, plot.type="single", col=c("blue","red"), lty=1:2,
lwd=2,main="Monthly closing prices of SBUX and MFST",
ylab="Adjusted close price")
legend(x="topleft", legend=c("SBUX","MSFT"), col=c("blue","red"),
lty=1:2)
#Importar datos de Yahoo Finance
library(tseries)
SBUX.z = get.hist.quote(instrument="sbux", start="1993-03-01",
end="2020-06-01", quote="AdjClose",
provider="yahoo", origin="1970-01-01",
compression="d", retclass="zoo")
#Importar datos directamente como objeto zoo
sbux.z2 = read.zoo("sbuxPrices.csv",
format="%m/%d/%Y", sep=",", header=T)
#Importar datos de Yahoo Finance
library(tseries)
SBUX.z = get.hist.quote(instrument="sbux", start="1993-03-01",
end="2020-06-01", quote="AdjClose",
provider="yahoo", origin="1970-01-01",
compression="d", retclass="zoo")
View(SBUX.z)
MSFT.z = get.hist.quote(instrument="msft", start="1993-03-01",
end="2020-06-01", quote="AdjClose",
provider="yahoo", origin="1970-01-01",
compression="d", retclass="zoo")
#Plot
plot(cbind(SBUX.z,MSFT.z), plot.type="single", col=c("blue","red"), lty=1:2,
lwd=2,main="Monthly closing prices of SBUX and MFST",
ylab="Adjusted close price")
legend(x="topleft", legend=c("SBUX","MSFT"), col=c("blue","red"),
lty=1:2)
#Libería dygraphs
install.packages("dygraphs")
library(dygraphs)
dygraph(SBUX.z, "Monthly closing prices of SBUX")
dygraph(cbind(SBUX.z,MSFT.z), "Monthly closing prices of SBUX and MFST")
#############################################################3 Datos diarios
#Generamos datos aleatorios
dygraph(cbind(SBUX.z,MSFT.z), "Monthly closing prices of SBUX and MFST")
dygraph(SBUX.z, "Monthly closing prices of SBUX")
#############################################################3 Datos diarios
#Generamos datos aleatorios
datos <- rnorm(78, 0, 10)
fechas <- seq(as.Date("2020-03-06"), as.Date("2020-05-22"), by = "day")
as.numeric(format(fechas[1], "%j"))
#Importar datos directamente como objeto zoo
sbux.z2 = read.zoo("sbuxPrices.csv",
format="%m/%d/%Y", sep=",", header=T)
#############################################################3 Datos diarios
#Generamos datos aleatorios
datos <- rnorm(78, 0, 10)
fechas <- seq(as.Date("2020-03-06"), as.Date("2020-05-22"), by = "day")
as.numeric(format(fechas[1], "%j"))
miserie.ts<-ts(datos,start=c(2016,66), frequency=365)
plot(miserie.ts)
library(zoo)
miserie.z=zoo(datos, fechas)
plot(miserie.z)
dygraph(miserie.z)
plot(miserie.z)
dygraph(miserie.z)
